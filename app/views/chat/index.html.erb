<%= render 'home/navbar' %>

<% content_for :title, @var.Username %>
<h5 class="mb-1">
  Hello there <%= @var.Username %>
</h5>
<% flash.each do |key, value| %>
  <div class="alert alert-<%= key %>"><%= value %></div>
<% end %>

<div class="container">
  <div class="row">
    <div class="card col-sm-4" style="overflow:scroll;">
      <ul class="list-group list-group-flush">
        <% @users.each do |user| %>
          <li class="list-group-item user-select bg-light" id="<%= user[:id] %>" name='user-select'>
            <div class="d-flex w-100 justify-content-between">
              <h5 class="mb-1"><%= user[:name] %></h5>
            </div>
          </li>
        <% end %>
      </ul>
    </div>


    <div class="col-sm-8">
      <div class="chatbody">
        <table class="table">
          <tr>
            <td></td>
          </tr>
        </table>
        <div id="messages" class="messages">
          Messages loading...
        </div>
      </div>

      <div class="row col-sm-8">
        <%= form_for :message, remote: true do |f| %>
          <div class="col-xs-9">
            Message : <%= f.text_area :text, class: "form-control" %><br/>
          </div>
          <div class="col-xs-3 capitalize">
            <%= button_tag "Send Message", :type => 'button', :onclick => "sendMessage()", class: "btn btn-info btn-block" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<%= tag("div", id: 'user-id', data: { name: @var.Username, id: @var.Email.gsub!(/[@.-_]/, '@' => "at", '.' => '', '-' => '', '_' => '') }) %>
<script type="text/javascript">
  const newMessage = (msg, id) => {
      return (
          `<div class='message ${msg.sender.uid === id && 'self'}'>
          <div class='message-text'>${msg.text}</div>
          <div class='message-sender'>- ${msg.sender.name}</div>
      </div>`
      )
  }

  const displayNewMessage = (currentChatterId, msg) => {
      const userDiv = document.getElementById('user-id');
      const id = userDiv.dataset.id;
      if (![currentChatterId, id].includes(msg.sender.uid)) { return; }
      const newNode = document.createElement("div")
      newNode.innerHTML = newMessage(msg, id)
      const messageDiv = document.getElementById('messages')
      messageDiv.appendChild(newNode)
      messageDiv.scrollTop = messageDiv.scrollHeight
  }

  const addMessageListener = id => {
      CometChat.addMessageListener(
          'listener_id',
          new CometChat.MessageListener({
              onTextMessageReceived: textMessage => displayNewMessage(id, textMessage)
          })
  )}

  const loginUser = () => {
      const userDiv = document.getElementById('user-id');
      if (!userDiv) { return true }
      const id = userDiv.dataset.id;
      CometChat.login(id, "04817d103e2d7a6c7b21aa901df5e00f14bb0d0a").then(
          User => {
          const messageDiv = document.getElementById('messages');
          messageDiv.innerHTML = `<div class="whisper">Choose a  user to start chatting</div>`;
      },
      error => {
          console.log("Login failed with exception:", {error});
      })
  }

  const setUserListeners = () => {
      const users = document.getElementsByName('user-select');
      users.forEach(u => u.addEventListener("click", e => {
          const id = e.target.id || e.target.offsetParent.id
          setUser(id);
          fetchMessages(id);
      }))
  }

  const initializeChat = () => {
      CometChat.init("9320005f3fade4").then(
          hasInitialized => {
              loginUser()
          },
          error => {
              console.log("Initialization failed with error:", error);
          }
      )};

  const setUser = id => {
      const previousDivs = Array.from(document.getElementsByClassName('bg-info'));
      previousDivs.forEach(div => div.className = div.className.replace(/\bbg-info\b/,''));
      const userDiv = document.getElementById(id);
      userDiv.className = 'list-group-item bg-info user-select'
      addMessageListener(id)
  }

  const fetchMessages = id => {
      if (!id) { return; }

      const limit = 30;
      const messagesRequest = new CometChat.MessagesRequestBuilder().setUID(id).setLimit(limit).build();
      messagesRequest.fetchPrevious().then(
          messages => {
              const messageDiv = document.getElementById('messages');
              messageDiv.innerHTML = messages.length > 0 ?
                messages.map(msg => newMessage(msg, id)).join('') :
                `<div class="whisper">Start of message history</div>`;
              messageDiv.scrollTop = messageDiv.scrollHeight
          },
          error => {
              console.log("Message fetching failed with error:", error);
          }
      );
  }

  const sendMessage = () => {
      const recipient_id = document.getElementsByClassName('bg-info')[0].id;
      const message_text = document.getElementsByName('message[text]')[0].value;
      document.getElementsByName('message[text]')[0].value = ''

      const messageType = CometChat.MESSAGE_TYPE.TEXT;
      const receiverType = CometChat.RECEIVER_TYPE.USER;
      const textMessage = new CometChat.TextMessage(recipient_id, message_text, messageType, receiverType);

      CometChat.sendMessage(textMessage).then(
          message => displayNewMessage(recipient_id, message),
          error => {
              console.log("Message sending failed with error:", error);
          }
      );
  }
  initializeChat();
  setUserListeners();
</script>
